https://docs.arduino.cc/libraries/arduinoble/

#include <mbed.h>

// Define PWM pins for the motors
mbed::PwmOut motorA_pwm(P1_2);   // Motor 1 PWM pin
mbed::PwmOut motorB_pwm(P0_27);  // Motor 2 PWM pin

// Define direction control pins for the motors
mbed::DigitalOut motorA_dir(P0_4);  // Motor 1 direction pin
mbed::DigitalOut motorB_dir(P0_5);  // Motor 2 direction pin

// Define Encoder pins for Motor A and Motor B
mbed::InterruptIn encoderA(P1_11);
mbed::InterruptIn encoderB(P1_12);


// Define motor speed (between 0.0 and 1.0)
float motor_speed = 0.5;

// Encoder variables for Motor A and Motor B
int pulseCountA = 0;
int pulseCountB = 0;
float motorSpeedA = 0.0;  // Motor A speed in RPM
float motorSpeedB = 0.0;  // Motor B speed in RPM

// Encoder pulses per revolution (adjust to match your encoder's spec)
float pulsesPerRevolutionA = 12.0;  // Motor A encoder PPR
float pulsesPerRevolutionB = 12.0;  // Motor B encoder PPR

mbed::Timer speedTimer;  // Timer to calculate motor speed every second

int Equalized = 0;

// Interrupt handler for encoder A (Motor A)
void encoderISR_A() {
  pulseCountA++;
}

// Interrupt handler for encoder B (Motor B)
void encoderISR_B() {
  pulseCountB++;
}

void setup() {
  // Initialize Serial communication at 9600 baud rate
  Serial.begin(9600);
  Serial.println("Serial communication started.");

  // Set PWM period (optional, depending on motor driver requirements)
  motorA_pwm.period(0.001);  // Set PWM period to 1 ms for motor 1
  motorB_pwm.period(0.001);  // Set PWM period to 1 ms for motor 2

  // Set motor directions
  motorA_dir = 1;  // Set motor 1 to forward direction
  motorB_dir = 0;  // Set motor 2 to reverse direction

  // Set motor speeds
  motorA_pwm.write(motor_speed);  // Set speed for motor 1
  motorB_pwm.write(motor_speed);  // Set speed for motor 2

  // Attach interrupts for encoder signals
  // Attach interrupt for encoder A (Motor A) on falling edge
  encoderA.fall(&encoderISR_A);  // Interrupt on falling edge of Motor A encoder
  encoderB.fall(&encoderISR_B);  // Interrupt on falling edge of Motor B encoder

  // Start timer for speed calculation
  speedTimer.start();
}



void loop() {

}

void SpeedCalc() {
  if (speedTimer.read() >= 1.0) {  // 1 second elapsed
    speedTimer.reset();

    // Calculate motor A speed in RPM
    motorSpeedA = (pulseCountA / pulsesPerRevolutionA) * 60.0;  // Convert to RPM
    pulseCountA = 0;                                            // Reset pulse count for Motor A

    // Calculate motor B speed in RPM
    motorSpeedB = (pulseCountB / pulsesPerRevolutionB) * 60.0;  // Convert to RPM
    pulseCountB = 0;                                            // Reset pulse count for Motor B

    // Print motor speeds to serial monitor
    Serial.print("Motor A speed: ");
    Serial.print(motorSpeedA);
    Serial.println(" RPM");

    Serial.print("Motor B speed: ");
    Serial.print(motorSpeedB);
    Serial.println(" RPM");
  }
}
void equalizeMotor() {
  Equalized = 0;
  while (Equalized == 0) {
    if (motorSpeedA < (motorSpeedB - 10)) {
      MotorBDown();
    }
    if (motorSpeedB < (motorSpeedA - 10)) {
      MotorADown();
    }
    if ((motorSpeedA < (motorSpeedB + 10)) && (motorSpeedA > (motorSpeedB - 10))) {
      Equalized == 1;
    }
    if (motorSpeedA == motorSpeedB) {
      Equalized == 1;
    }
  }
}

void MotorAUp() {
  motorSpeedA = min(motorSpeedA + 0.1, 1.0);
  motorA_pwm.write(motorSpeedA);
  Serial.print("Motor A speed increased to ");
  Serial.println(motorSpeedA);
}

void MotorADown() {
  motorSpeedA = max(motorSpeedA - 0.1, 0.0);
  motorA_pwm.write(motorSpeedA);
  Serial.print("Motor A speed decreased to ");
  Serial.println(motorSpeedA);
}

void MotorBUp() {
  motorSpeedB = min(motorSpeedB + 0.1, 1.0);
  motorB_pwm.write(motorSpeedB);
  Serial.print("Motor B speed increased to ");
  Serial.println(motorSpeedB);
}

void MotorBDown() {
  motorSpeedB = max(motorSpeedB - 0.1, 0.0);
  motorB_pwm.write(motorSpeedB);
  Serial.print("Motor B speed decreased to ");
  Serial.println(motorSpeedB);
}
